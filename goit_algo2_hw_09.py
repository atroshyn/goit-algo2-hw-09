# -*- coding: utf-8 -*-
"""goit-algo2-hw-09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aEMtvp5sAC4T1wbL0cn7Z4vsSOPxmHhE
"""

import random
import math


# Визначення функції Сфери
def sphere_function(x):
    return sum(xi ** 2 for xi in x)


# Hill Climbing
def hill_climbing(func, bounds, iterations=1000, epsilon=1e-6):
    current = [random.uniform(low, high) for low, high in bounds]
    current_value = func(current)

    for _ in range(iterations):
        neighbor = [xi + random.uniform(-0.1, 0.1) for xi in current]
        # Гарантуємо, що сусід не виходить за межі
        neighbor = [max(min(neighbor[i], bounds[i][1]), bounds[i][0]) for i in range(len(bounds))]
        neighbor_value = func(neighbor)
        # Завершуємо виконання, коли результат менше е
        if abs(current_value - neighbor_value) < epsilon:
            break

        if neighbor_value < current_value:
            current = neighbor
            current_value = neighbor_value

    return current, current_value


# Random Local Search
def random_local_search(func, bounds, iterations=1000, epsilon=1e-6):
    best = [random.uniform(low, high) for low, high in bounds]
    best_value = func(best)

    for _ in range(iterations):
        candidate = [random.uniform(low, high) for low, high in bounds]
        candidate_value = func(candidate)
        # Завершуємо виконання, коли результат менше е
        if abs(candidate_value - best_value) < epsilon:
            break

        if candidate_value < best_value:
            best = candidate
            best_value = candidate_value

    return best, best_value


# Simulated Annealing
def simulated_annealing(func, bounds, iterations=1000, temp=1000, cooling_rate=0.95, epsilon=1e-6):
    current = [random.uniform(low, high) for low, high in bounds]
    current_value = func(current)
    best = current
    best_value = current_value

    for _ in range(iterations):
        temp *= cooling_rate
        if temp < epsilon: # Завершуємо виконання, коли температура менше е
            break

        # Створення сусіднього рішення
        neighbor = [xi + random.uniform(-0.1, 0.1) for xi in current]
        neighbor = [max(min(neighbor[i], bounds[i][1]), bounds[i][0]) for i in range(len(bounds))]
        neighbor_value = func(neighbor)

        delta = neighbor_value - current_value
        if delta < 0 or math.exp(-delta / temp) > random.random():
            current = neighbor
            current_value = neighbor_value

            if current_value < best_value:
                best = current
                best_value = current_value

    return best, best_value


if __name__ == "__main__":
    # Межі для функції
    bounds = [(-5, 5), (-5, 5)]

    # Виконання алгоритмів
    print("=== Hill Climbing ===")
    hc_solution, hc_value = hill_climbing(sphere_function, bounds)
    print("Розв'язок:", [round(x, 5) for x in hc_solution], "Значення:", round(hc_value, 8))

    print("\n=== Random Local Search ===")
    rls_solution, rls_value = random_local_search(sphere_function, bounds)
    print("Розв'язок:", [round(x, 5) for x in rls_solution], "Значення:", round(rls_value, 8))

    print("\n=== Simulated Annealing ===")
    sa_solution, sa_value = simulated_annealing(sphere_function, bounds)
    print("Розв'язок:", [round(x, 5) for x in sa_solution], "Значення:", round(sa_value, 8))